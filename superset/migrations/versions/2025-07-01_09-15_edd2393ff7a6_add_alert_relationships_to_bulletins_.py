# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
"""Add alert relationships to bulletins table

Revision ID: edd2393ff7a6
Revises: 1cb9260fe811
Create Date: 2025-07-01 09:15:41.123050

"""

# revision identifiers, used by Alembic.
revision = 'edd2393ff7a6'
down_revision = '1cb9260fe811'

from alembic import op
import sqlalchemy as sa


def table_exists(table_name):
    """Check if a table exists"""
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    return table_name in inspector.get_table_names()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create disease_forecast_alerts table first (with existence check)
    if not table_exists('disease_forecast_alerts'):
        op.create_table('disease_forecast_alerts',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('municipality_code', sa.Text(), nullable=True),
            sa.Column('forecast_date', sa.Date(), nullable=True),
            sa.Column('disease_type', sa.Text(), nullable=True),
            sa.Column('alert_level', sa.Text(), nullable=True),
            sa.Column('alert_title', sa.Text(), nullable=True),
            sa.Column('alert_message', sa.Text(), nullable=True),
            sa.Column('predicted_cases', sa.Integer(), nullable=True),
            sa.Column('municipality_name', sa.Text(), nullable=True),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('municipality_code', 'forecast_date', 'disease_type', 'municipality_name', name='uq_disease_forecast_alerts')
        )
    
    # Add alert relationship columns to bulletins table (with existence checks)
    bulletins_columns = []
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    try:
        bulletins_columns = [col['name'] for col in inspector.get_columns('bulletins')]
    except:
        bulletins_columns = []
    
    if 'disease_forecast_alert_id' not in bulletins_columns:
        op.add_column('bulletins', sa.Column('disease_forecast_alert_id', sa.Integer(), nullable=True))
    
    if 'weather_forecast_alert_composite_id' not in bulletins_columns:
        op.add_column('bulletins', sa.Column('weather_forecast_alert_composite_id', sa.String(length=200), nullable=True))
    
    # Create foreign key constraint for disease forecast alerts (with existence check)
    try:
        existing_fks = inspector.get_foreign_keys('bulletins')
        fk_exists = any(fk['constrained_columns'] == ['disease_forecast_alert_id'] for fk in existing_fks)
        if not fk_exists:
            op.create_foreign_key('fk_bulletins_disease_forecast_alert', 'bulletins', 'disease_forecast_alerts', ['disease_forecast_alert_id'], ['id'])
    except:
        # If we can't check, try to create it anyway
        try:
            op.create_foreign_key('fk_bulletins_disease_forecast_alert', 'bulletins', 'disease_forecast_alerts', ['disease_forecast_alert_id'], ['id'])
        except:
            pass  # FK might already exist
    
    # Create check constraint to ensure only one alert type is set (with existence check)
    try:
        existing_checks = inspector.get_check_constraints('bulletins')
        check_exists = any(check['name'] == 'chk_bulletin_single_alert_type' for check in existing_checks)
        if not check_exists:
            op.create_check_constraint('chk_bulletin_single_alert_type', 'bulletins', '(disease_forecast_alert_id IS NULL) != (weather_forecast_alert_composite_id IS NULL) OR (disease_forecast_alert_id IS NULL AND weather_forecast_alert_composite_id IS NULL)')
    except:
        # If we can't check, try to create it anyway
        try:
            op.create_check_constraint('chk_bulletin_single_alert_type', 'bulletins', '(disease_forecast_alert_id IS NULL) != (weather_forecast_alert_composite_id IS NULL) OR (disease_forecast_alert_id IS NULL AND weather_forecast_alert_composite_id IS NULL)')
        except:
            pass  # Check constraint might already exist
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop check constraint (if exists)
    try:
        op.drop_constraint('chk_bulletin_single_alert_type', 'bulletins', type_='check')
    except:
        pass  # Constraint might not exist
    
    # Drop foreign key constraint (if exists)
    try:
        op.drop_constraint('fk_bulletins_disease_forecast_alert', 'bulletins', type_='foreignkey')
    except:
        pass  # FK might not exist
    
    # Remove alert relationship columns from bulletins table (if they exist)
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    try:
        bulletins_columns = [col['name'] for col in inspector.get_columns('bulletins')]
        if 'weather_forecast_alert_composite_id' in bulletins_columns:
            op.drop_column('bulletins', 'weather_forecast_alert_composite_id')
        if 'disease_forecast_alert_id' in bulletins_columns:
            op.drop_column('bulletins', 'disease_forecast_alert_id')
    except:
        # Try to drop anyway
        try:
            op.drop_column('bulletins', 'weather_forecast_alert_composite_id')
        except:
            pass
        try:
            op.drop_column('bulletins', 'disease_forecast_alert_id')
        except:
            pass
    
    # Drop disease_forecast_alerts table (if exists)
    if table_exists('disease_forecast_alerts'):
        op.drop_table('disease_forecast_alerts')
    # ### end Alembic commands ###
