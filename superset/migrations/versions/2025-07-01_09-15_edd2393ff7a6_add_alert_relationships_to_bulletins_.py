# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
"""Add alert relationships to bulletins table

Revision ID: edd2393ff7a6
Revises: 1cb9260fe811
Create Date: 2025-07-01 09:15:41.123050

"""

# revision identifiers, used by Alembic.
revision = 'edd2393ff7a6'
down_revision = '1cb9260fe811'

from alembic import op
import sqlalchemy as sa


def table_exists(table_name):
    """Check if a table exists"""
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    return table_name in inspector.get_table_names()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create disease_forecast_alerts table if it doesn't exist
    if not table_exists('disease_forecast_alerts'):
        op.create_table('disease_forecast_alerts',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('municipality_code', sa.Text(), nullable=True),
            sa.Column('forecast_date', sa.Date(), nullable=True),
            sa.Column('disease_type', sa.Text(), nullable=True),
            sa.Column('alert_level', sa.Text(), nullable=True),
            sa.Column('alert_title', sa.Text(), nullable=True),
            sa.Column('alert_message', sa.Text(), nullable=True),
            sa.Column('predicted_cases', sa.Integer(), nullable=True),
            sa.Column('municipality_name', sa.Text(), nullable=True),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('municipality_code', 'forecast_date', 'disease_type', 'municipality_name')
        )
    
    # Add alert relationship columns to bulletins table
    op.add_column('bulletins', sa.Column('disease_forecast_alert_id', sa.Integer(), nullable=True))
    op.add_column('bulletins', sa.Column('weather_forecast_alert_composite_id', sa.String(length=200), nullable=True))
    
    # Create foreign key constraint for disease forecast alerts
    op.create_foreign_key(None, 'bulletins', 'disease_forecast_alerts', ['disease_forecast_alert_id'], ['id'])
    
    # Create check constraint to ensure only one alert type is set
    # for now, both can be null but not both at the same time
    op.create_check_constraint('chk_bulletin_single_alert_type', 'bulletins', '(disease_forecast_alert_id IS NULL) != (weather_forecast_alert_composite_id IS NULL) OR (disease_forecast_alert_id IS NULL AND weather_forecast_alert_composite_id IS NULL)')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop check constraint
    op.drop_constraint('chk_bulletin_single_alert_type', 'bulletins', type_='check')
    
    # Drop foreign key constraint
    op.drop_constraint(None, 'bulletins', type_='foreignkey')
    
    # Remove alert relationship columns from bulletins table
    op.drop_column('bulletins', 'weather_forecast_alert_composite_id')
    op.drop_column('bulletins', 'disease_forecast_alert_id')
    
    # Drop disease_forecast_alerts table if it exists
    if table_exists('disease_forecast_alerts'):
        op.drop_table('disease_forecast_alerts')
    # ### end Alembic commands ###
