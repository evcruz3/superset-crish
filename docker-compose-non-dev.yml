#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# -----------------------------------------------------------------------
# We don't support docker compose for production environments.
# If you choose to use this type of deployment make sure to
# create you own docker environment file (docker/.env) with your own
# unique random secure passwords and SECRET_KEY.
# -----------------------------------------------------------------------
x-superset-depends-on: &superset-depends-on
  - db
  - redis
x-superset-volumes:
  &superset-volumes # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./docker:/app/docker
  - superset_home:/app/superset_home
  - ./chart_data:/app/chart_data

x-common-build: &common-build
  context: .
  target: dev
  cache_from:
    - apache/superset-cache:3.10-slim-bookworm
  args:
    BUILD_TRANSLATIONS: "true"

services:
  nginx-certbot:
    image: jonasal/nginx-certbot:5.4.0
    container_name: superset_nginx
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL:-admin@dnmg.gov.tl}
      # - STAGING=1  # Uncomment for testing to avoid rate limits
    ports:
      - 80:80
      - 443:443
    volumes:
      - nginx_secrets:/etc/letsencrypt
      - ./docker/nginx/user_conf.d:/etc/nginx/user_conf.d:ro
    depends_on:
      - superset
    networks:
      - superset_network
    restart: unless-stopped

  redis:
    image: redis:7
    container_name: superset_cache
    restart: unless-stopped
    volumes:
      - redis:/data
    networks:
      - superset_network

  db:
    env_file:
      - path: docker/.env # default
        required: true
      - path: docker/.env-local # optional override
        required: false
    image: postgres:15
    container_name: superset_db
    restart: unless-stopped
    volumes:
      - db_home:/var/lib/postgresql/data
      - ./docker/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    networks:
      - superset_network

  superset:
    env_file:
      - path: docker/.env # default
        required: true
      - path: docker/.env-local # optional override
        required: false
    build:
      <<: *common-build
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    restart: unless-stopped
    # Remove external port mapping - nginx will handle external access
    # ports:
    #   - 8088:8088
    depends_on: *superset-depends-on
    volumes: *superset-volumes
    networks:
      - superset_network

  superset-init:
    container_name: superset_init
    build:
      <<: *common-build
    command: ["/app/docker/docker-init.sh"]
    env_file:
      - path: docker/.env # default
        required: true
      - path: docker/.env-local # optional override
        required: false
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true
    networks:
      - superset_network

  superset-worker:
    build:
      <<: *common-build
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file:
      - path: docker/.env # default
        required: true
      - path: docker/.env-local # optional override
        required: false
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME",
        ]
    networks:
      - superset_network

  superset-worker-beat:
    build:
      <<: *common-build
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file:
      - path: docker/.env # default
        required: true
      - path: docker/.env-local # optional override
        required: false
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true
    networks:
      - superset_network

  disease-predictor:
    build: ./crish-disease-predictor
    container_name: superset_disease_predictor
    volumes:
      - ./crish-disease-predictor:/app
      - ./superset-frontend/plugins/preset-chart-deckgl-osm/src/layers/Country/countries/timorleste.geojson:/app/config/timorleste.geojson:ro
    env_file:
      - path: docker/.env # default
        required: true
      - path: docker/.env-local # optional override
        required: false
    depends_on:
      - db
    restart: unless-stopped
    user: "root"
    networks:
      - superset_network

  weather-forecast-puller:
    build: ./crish-weather-forecast-puller
    container_name: superset_weather_forecast_puller
    volumes:
      - ./crish-weather-forecast-puller/data:/app/data
      - ./superset-frontend/plugins/preset-chart-deckgl-osm/src/layers/Country/countries/timorleste.geojson:/app/config/timorleste.geojson:ro
    env_file:
      - path: docker/.env # default
        required: true
      - path: docker/.env-local # optional override
        required: false
    depends_on:
      - db
    restart: unless-stopped
    user: "root"
    networks:
      - superset_network

  case-reports-initializer:
    build: ./crish-case-reports-initializer
    container_name: superset_case_reports_initializer
    volumes:
      - ./crish-case-reports-initializer/data:/app/data
    env_file:
      - path: docker/.env # default
        required: true
      - path: docker/.env-local # optional override
        required: false
    depends_on:
      - db
      - superset-init
    restart: "no"
    user: "root"
    networks:
      - superset_network

  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z # You can update this version if desired
    container_name: superset_minio
    env_file:
      - path: docker/.env # default
        required: true
      - path: docker/.env-local # optional override
        required: false
    environment:
      - MINIO_DISK_USAGE_THRESHOLD=5.0
    ports:
      - "9090:9000" # API port changed
      - "9091:9001" # Console port changed
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD-SHELL", "mc alias set myminio http://localhost:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} && mc admin info myminio"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - superset_network

  # minio-init:
  #   image: minio/mc
  #   container_name: superset_minio_init
  #   depends_on:
  #     minio:
  #       condition: service_healthy
  #   env_file:
  #     - path: docker/.env # For MINIO_ROOT_USER, MINIO_ROOT_PASSWORD, S3_BUCKET
  #       required: true
  #     - path: docker/.env-local # optional override
  #       required: false
  #   entrypoint: /app/docker/minio-init-bucket.sh
  #   volumes:
  #     - ./docker/minio-init-bucket.sh:/app/docker/minio-init-bucket.sh:ro
  #   restart: "no"

volumes:
  superset_home:
    external: false
  db_home:
    external: false
  redis:
    external: false
  minio_data:
    external: false
  nginx_secrets:
    external: false

networks:
  superset_network:
    driver: bridge
